#!/usr/bin/perl -w
use strict;
use Time::Progress;
use HTML::Entities;
use threads;
#use Diagnostics;

#All variables
my $num_of_threads = 1;         #Number of threads
my $os="WIN";                   #Declare operating system for correct directory handling: WIN for Windows and OSX for Macintosh
my $keeptables="1";             #1 to change </tr> to end of sentences, 0 to remove all tables
my $source;                     #Source of text files
my $target_10k;                 #Destination for output (10K)
my $target_mda;                 #Destination for output (MD&A)
my $slash;                      #Declare slash (dependent on operating system)
my @allfiles;                   #All files in source directory, put into an array
my $p;                          #Variable for progress-bar
my $c;                          #Variable for progress-bar
my $data;                       #Contents from source file
my $text;                       #Results of the search query (10K)
my $mda;                        #Results of the search query (MD&A)
my $output_10k;                 #Output file for full 10K
my $output_mda;                 #Output file for MD&A
my $log;                        #Log file (also used to determine point to continue progress)
my @filesinlog;                 #Files that have been processed according to log file
my @threads;                    #All threads in array
my $replace_old;                #Partial text to be replaced
my $replace_new;                #Partial text with the new replacement

#Searchstrings in regular expressions
my $startstring='[^!]item\s*1\D';
my $endstring='ENDOFTENK';
my $item7start='[^!]item\s*7[^a]';
my $item7end='ENDOFMDA';
my $item8start='[^!]item\s*8';     
my $item9start='[^!]item\s*9';
my $item10start='[^!]item\s*10';

if($os ne "WIN" && $os ne "OSX")
{
print "Declare valid operating system!\n";
exit; 
}

elsif($os eq "WIN")
{
#Set folders for Windows
$source="C:\\EDGAR\\10K";
$target_10k="C:\\EDGAR\\10K_Full";
$target_mda="C:\\EDGAR\\10K_MDA";
$slash="\\";
}

elsif($os eq "OSX")
{
#Set folders for Macintosh
$source="/Volumes/Data/Documents/10K";
$target_10k="/Volumes/Data/Documents/10K_Full";
$target_mda="/Volumes/Data/Documents/10K_MDA";
$slash="/";
}

{
#Open source folder and read all files
opendir(DIR,"$source") or die $!;
@allfiles=grep ! /(^\.|^(log\.txt))/, readdir DIR;
chomp(@allfiles);

#Creates destination folder
mkdir $target_10k;
mkdir $target_mda;

#Keep track of progress
$|=1;
$p=new Time::Progress;
$p->attr(min => 0, max => scalar @allfiles);
$c=0;

#Create an array of threads
@threads = job();

#Loop through the array until every thread is finished
foreach(@threads)
    {
    $_ = threads->create(\&extract);
    }

foreach(@threads)
    {
    $_->join();
    }
}



#Subroutines
sub job
{
my @initThreads;
for(my $t = 1;$t<=$num_of_threads;$t++)
    {
    push(@initThreads,$t);
    }
return @initThreads;
}

sub extract
{
if (-e "$source$slash"."log.txt")
{
open (FH, "<", "$source$slash"."log.txt") or die $!;
@filesinlog = <FH>;
chomp(@filesinlog);
close FH or die $!;
}
 
my $f=0;
while ($f < scalar @allfiles)
    {
    print $p->report("%45b %p\r", $c);
    if (grep $allfiles[$f] eq $_, @filesinlog)
        {
        $f++;
        }
    else
        {
            {
            local $/;
            open (SLURP, "$source$slash$allfiles[$f]") or die $!;
            $f++;
            $data = <SLURP>;
            }
        close SLURP or die $!;

        #Steps to extract text
            {
            #Replacements in regular expressions (Cleanup)
            
            $data=~ s/&nbsp;/ /ig;                              #Replace &nbsp; with space (decode_entities works too, but results in invalid characters)
            $data=~ s/&#160;/ /ig;                              #Replace &nbsp; with space (decode_entities works too, but results in invalid characters)
            $data=decode_entities($data);                       #Remove HTML entities
            $data=~ s/<\/SEC-DOCUMENT>/ENDOFTENK/is;            #Mark end of document
            $data=~ s/<\/p>/\./igs;                             #End of sentence
            $data=~ s/<\/div>/\./igs;                           #End of sentence
            $data=~ s/<br.{0,2}>/\./igs;                        #End of sentence
            
            if ($keeptables==1)
                {
                $data=~ s/<\/tr>/\.\n/igs;                      #Break line
                }
            else
                {
                $data=~ s/<table.*\/table>/ /igs;               #Remove tables
                }
            $data=~ s/<[^\>]*>/ /igs;                           #Remove html tags (starts with "<", ends with ">", with 1-200 characters)
            $data=~ s/&.{2,4};/ /igs;                           #Replace any leftover HTML entities with spaces
            $data=~ s/-/ /g;                                    #Replace symbols with space (e.g. "-")
            $data=~ s/'s//g;                                    #Remove symbols from words (e.g. "'s")
            $data=~ s/\S{30,}/ /g;                              #Remove long strings (+30 characters)
            $data=~ s/\W{4,}/ /g;                              #Remove string of 4 characters or more consisting of more than 4 non-alphanumeric characters
            #$data=~ s/.*[-$%^*()_+|~=`{}\[\]:";'<>,\/]+.*//g;  #Remove string if it contains forbidden special characters
            $data=~ s/\d+\.+\d+/ /g;                            #Remove false end of sentences (.)
            $data=~ s/\d+\,+\d+/ /g;                            #Remove false end of sentences (.)
            $data=~ s/\.\s+\./\./g;                             #Remove double end of sentences             
            $data=~ s/\n/ /g;                                   #Replace breaks by spaces
            $data=~ s/ {2,}/ /g;                                #Remove double spaces
            $data=~ s/see.{0,4}item/see \!Item/igms;           #Add ! as prefix when "Item" is used as a reference
            $data=~ s/under.{0,4}item/under \!Item/igms;       #Add ! as prefix when "Item" is used as a reference
            $data=~ s/in.{0,4}item/in \!Item/igms;             #Add ! as prefix when "Item" is used as a reference
            $data=~ s/of.{0,4}item/of \!Item/igms;             #Add ! as prefix when "Item" is used as a reference
            $data=~ s/with.{0,4}item/with \!Item/igms;         #Add ! as prefix when "Item" is used as a reference
            $replace_old="([^!]item(.|\n){0,200}item)";         #Look for "Item" that is mentioned in a list (e.g. Table of Contents)

            while($data=~m/$replace_old/ismo)
                {
                $data=~m/$replace_old/ismo;
                $replace_new=$1;
                $replace_new=~s/item/\!Item/ismo;
                $data=~s/$replace_old/$replace_new/ismo;
                }          
                                         
            if($data=~m/($startstring.*?$endstring)/ismo)
                {
                $text=$1;
                $text=~s/ENDOFTENK//ismo;
                }
            else
                {
                $text="not found";
                }
            
            if ($text=~m/($item8start)/ismo)    
                {
                $text=~s/$item8start/ENDOFMDA/gis;
                }
            elsif ($text=~m/$item9start/ismo)    
                {
                $text=~s/$item9start/ENDOFMDA/gis;
                }
            elsif ($text=~m/$item10start/ismo)    
                {
                $text=~s/$item10start/ENDOFMDA/gis;
                }
            
            if($text=~m/($item7start.*?$item7end)/ismo)
                {
                $mda=$1;
                $mda=~s/ENDOFMDA//ismo;
                $mda=~s/\!Item/Item/gis;
                }
            else
                {
                $mda="not found";
                }
            $text=~s/\!Item/Item/gis;
            $text=~s/ENDOFMDA/ Item 0 /gis;
            }
    
        #Save output to file in destination folder (use the same filename as source file)
        binmode(STDOUT, ":utf8");
        open $output_10k, ">", "$target_10k$slash$allfiles[$f-1]" or die $!;
        print $output_10k $text;
        close $output_10k;
        
        open $output_mda, ">", "$target_mda$slash$allfiles[$f-1]" or die $!;
        print $output_mda $mda;
        close $output_mda;
        
        open $log, ">>", "$source$slash"."log.txt" or die $!;
        print $log "$allfiles[$f-1]\n";
        close $log;
        }
    
    #Update progress
    $c++;
    print $p->report("%45b %p\r", $c);
    }
    
#Print job duration
print $p->report("$f files processed: %L (%l sec) \n", $c);
}

